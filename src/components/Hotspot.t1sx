import React, { useRef, useMemo } from 'react';
import { Canvas, useFrame, extend, useThree,Vector3 } from '@react-three/fiber';
import { PlaneGeometry, MeshBasicMaterial, CanvasTexture, TextureLoader, SpriteMaterial, Sprite as ThreeSprite } from 'three';
import { ReactElement } from 'react';


extend({ ThreeSprite });

interface HotspotProps {
    position: [number, number, number];
    onClick: () => void;
    label: string;
    url?: string; // Make the url property optional
}
interface TextLabelProps {
    position: Vector3 | [number, number, number]; // 位置可以是 Vector3 或者数字数组
    label: string; // 标签文本
  }

const TextLabel: React.FC<TextLabelProps>  = ({ position, label }) => {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');

    canvas.width = 256; // 根据需要调整尺寸
    canvas.height = 64; // 根据需要调整尺寸
    if (context) {
        context.fillStyle = '#FFFFFF'; // 背景颜色
        context.fillRect(0, 0, canvas.width, canvas.height);
        context.font = '24px Arial';
        context.fillStyle = 'black';
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        context.fillText(label, canvas.width / 2, canvas.height / 2);
    }

    const texture = new CanvasTexture(canvas);
    const material = new MeshBasicMaterial({ map: texture });
    const geometry = new PlaneGeometry(1, 0.25); // 根据文本大小调整平面尺寸

    return (
        <mesh position={position} geometry={geometry} material={material} />
    );
};


const Hotspot: React.FC<HotspotProps> = ({ position,onClick, label }) => {
    const spriteMaterial = useMemo(() => {
        const loader = new TextureLoader();
        const texture = loader.load('path/to/your/label-image.png'); // 替换为你的面板图像路径
        return new SpriteMaterial({ map: texture });
    }, []);

    const spriteRef = useRef<ThreeSprite>(null); // 明确声明 `spriteRef` 可以持有 `Sprite` 类型

    const { camera } = useThree(); // 使用 useThree 钩子来获取场景中的相机

    useFrame(() => {
        if (spriteRef.current) {
            spriteRef.current.lookAt(camera.position); // 现在这行代码不会引起类型错误
        }
    });

    return (
        <>
        <mesh position={position} onClick={onClick}>
          <sphereGeometry args={[0.1, 16, 16]} />
          <meshStandardMaterial color="red" />
        </mesh>
        <TextLabel position={[position[0] + 0.5, position[1], position[2]]} label={label} />
      </>
    );
};

export default Hotspot;